import '/sys'
import '/types'
import '/builtins'
import '/operator'
import '/functools'
import '/itertools'
import '/posixpath'
import '/importlib'
import '/importlib/abc' qualified
import '/importlib/machinery' qualified
import '/collections'


BUILTINS = dict
  # Self-referential operators need to be declared like this. If one was to write
  # `raise = e -> raise e`, the compiler would not use its own `raise` because
  # it would assume the intention was to call the newly defined function.
  (raise) : (e   -> raise e)
  (in)    : (a b -> a in  b)
  (!)     : (f *: xs **: ys -> f *: xs **: ys)
  ($)     : (f *: xs **: ys -> f *: xs **: ys)
  (->)    : (-> None)
  (~>)    : (~> None)
  (->>)   : (->> None)
  (~>>)   : (~>> None)


BUILTINS.update locals! where
  # The rest of the compiler-defined functions can be given runtime equivalents here,
  # but they should preferably not reference each other to avoid slowdown.
  ..  = range
  ... = Ellipsis
  ::  = isinstance
  is  = operator.is_
  not = operator.not_
  <   = operator.lt
  <=  = operator.le
  ==  = operator.eq
  !=  = operator.ne
  >=  = operator.ge
  >   = operator.gt
  ~   = operator.inv
  +   = operator.add
  -   = operator.sub
  *   = operator.mul
  **  = operator.pow
  /   = operator.truediv
  //  = operator.floordiv
  %   = operator.mod
  &   = operator.and_
  ^   = operator.xor
  |   = operator.or_
  <<  = operator.lshift
  >>  = operator.rshift
  !!  = operator.getitem
  !!~ = operator.delitem
  finally   = True
  otherwise = True

  # These are not defined through `any`/`all` because they mimic
  # the builtins, which return the first truthy/falsy object itself
  # rather than the result of its conversion to a bool.
  or  = *: [*xs, y] -> y where for x in xs => if x => return x
  and = *: [*xs, y] -> y where for x in xs => if not x => return x

  #: Construct a set from distinct elements.
  #:
  #: set' :: object... -> set object
  #:
  set' = *: xs -> set xs

  #: Construct a list from distinct elements.
  #:
  #: list' :: object... -> [object]
  #:
  list' = *: xs -> list xs

  #: Construct a dictionary from key-value pairs.
  #:
  #: dict' :: (object, object)... -> dict object object
  #:
  dict' = *: xs **: k -> dict xs **: k

  #: Construct a tuple from distinct elements.
  #:
  #: tuple' :: object... -> (object...)
  #:
  tuple' = , = *: xs -> xs


BUILTINS.update $ (*: xs -> dict xs)
  # Runtime functions and Python builtins used by language constructs.
  # (The builtins are copied because compiled code may overshadow them.)
  '!dict',   dict
  '!super',  super
  '!locals', locals # TODO filter __! varnames
  '!chain',  itertools.chain
  '!keyword_union', *: xs -> foldl1 (x y -> dict x **: y) xs
  '!BaseException', BaseException

  '!subclass', attrs doc qualname name module *: bases **: kwds ->
    types.new_class name bases kwds $ ns ->
      for (k, v) in attrs.items! => ns !! k = v
      ns !! '__doc__'      = doc
      ns !! '__module__'   = module
      ns !! '__qualname__' = qualname

  #: Convert a POSIX path into (# of parent package + 1, root module name,
  #: path to the subobject). Passed as first argument to `!import`. Absolute
  #: imports have the first value set to 0.
  '!importname', info ->
    parent = 1
    path   = posixpath.normpath info |>.split '/'
    while True =>
      if not  path => raise ImportError $ '`{}` resolves to an empty name'.format info
         head path == ''   => parent  = 0
         head path == '..' => parent += 1
         head path == '.'  => # TODO: is this a fall-through, or does it default to None?
         otherwise => break!
      path.pop 0
    parent, path.pop 0, path

  '!import', (parent, h, t) package qualified _import: importlib._bootstrap._gcd_import ->
    root = node = _import h package parent
    for p in t =>
      node = except err => getattr node p
                    err :: AttributeError => _import p node.__package__ 1
    if qualified => root
       otherwise => node


BUILTINS.update locals! where
  # Other runtime functions with no compile-time equivalents.

  #: Compose two functions.
  #:
  #: (<-) :: (a -> b) (object... -> a) -> (object... -> b)
  #:
  <- = f g -> *: a **: k -> f $ g *: a **: k

  #: Partially apply a function.
  #:
  #: bind :: (object... -> a) object... -> (object... -> a)
  #:
  bind = f *: a **: k -> *: ae **: ke -> f *: (a + ae) **: (dict k **: ke)

  #: Flip the order of arguments of a binary function.
  #:
  #: flip :: (a b -> c) -> (b a -> c)
  #:
  flip = f -> x y -> f y x

  #: Stop an iterable after n items.
  #:
  #: take :: int (iter a) -> iter a
  #:
  take = n xs -> itertools.islice xs None n

  #: Ignore the first n items of an iterable.
  #:
  #: drop :: int (iter a) -> iter a
  #:
  drop = n xs -> itertools.islice xs n None

  #: Stop reading from an iterable once an item fails a predicate.
  #:
  #: takewhile :: (a -> bool) (iter a) -> iter a
  #:
  takewhile = f xs -> itertools.takewhile f xs

  #: Ignore items from an iterable until the first one that fails a predicate.
  #:
  #: dropwhile :: (a -> bool) (iter a) -> iter a
  #:
  dropwhile = f xs -> itertools.dropwhile f xs

  #: Concatenate multiple iterables.
  #:
  #: chain :: *(iter a) -> iter a
  #:
  chain = itertools.chain

  #: Attach an item to the beginning of an iterable.
  #:
  #: (:+) :: a (iter a) -> iter a
  #:
  :+ = a b -> itertools.chain (a,) b

  #: Attach an item to the end of an iterable.
  #:
  #: (+:) :: (iter a) a -> iter a
  #:
  +: = a b -> itertools.chain a (b,)

  #: Return the first item of a tuple.
  #:
  #: fst :: (a, ...) -> a
  #:
  fst = xs -> next $ iter xs

  #: Return the second item of a tuple.
  #:
  #: snd :: (a, b, ...) -> b
  #:
  snd = xs -> next $ drop 1 xs

  #: Return the first item of an iterable.
  #:
  #: head :: (iter a) -> a
  #:
  head = xs -> next $ iter xs

  #: Drop one item from an iterable.
  #:
  #: tail :: (iter a) -> iter a
  #:
  tail = xs -> list $ drop 1 xs

  #: Drop the last item from an iterable.
  #:
  #: init :: (Collection a) -> iter a
  #:
  init = !! slice None -1

  #: Return the last item of a collection.
  #:
  #: last :: (Collection a) -> a
  #:
  last = !! -1

  #: Iterate over an iterable. Mainly useful for side effects.
  #:
  #: exhaust :: (iter a) -> NoneType
  #:
  exhaust = x -> None where collections.deque x 0

  #: Repeatedly apply a function to an element.
  #:
  #: iterate :: (a -> a) a -> iter a
  #:
  iterate = f x -> while True =>
    yield x
    x = f x

  #: Left fold with starting value.
  #:
  #:   foldl f a [b, c, d] = f (f (f a b) c) d
  #:
  #: foldl :: (a b -> a) a (iter b) -> a
  #:
  foldl = f st xs -> functools.reduce f xs st

  #: Left fold without starting value. Raises an exception if the input is empty.
  #:
  #:   foldl1 f [b, c, d] = f (f b c) d
  #:
  #: foldl1 :: (a a -> a) (iter a) -> a
  #:
  foldl1 = f xs -> functools.reduce f xs

  #: Like `foldl`, but yields intermediate values too.
  #:
  #:   scanl f a [b, c, d] = [a, f a b, f (f a b) c, f (f (f a b) c) d]
  #:
  #: scanl :: (a b -> a) a (iter b) -> iter a
  #:
  scanl = f st xs -> itertools.accumulate (st:+xs) f

  #: Left scan without a starting value. Returns an empty list if the input is empty.
  #:
  #: scanl1 :: (a a -> a) (iter a) -> iter a
  #:
  scanl1 = f xs -> itertools.accumulate xs f

  # TODO: stuff i want:
  #attrgetter = operator.attrgetter
  #itemgetter = operator.itemgetter
  #|>> = flip map

  # TODO should also define foldr(1) and scanr(1). Probably.

_NEW_BUILTINS = BUILTINS.copy!


# Overriding `__builtins__` after the code has already started running
# does nothing. We'll have to dump builtins into the global namespace.
globals!.update BUILTINS
BUILTINS.update $ if
  __builtins__ :: dict => __builtins__
  otherwise => __builtins__.__dict__


add_module_builtins = module -> if
  # PyPy does not support overriding __builtins__, unfortunately.
  # This probably makes *-imports even worse than they usually are...
  PY_TAG.startswith 'pypy3-' => module.__dict__.update _NEW_BUILTINS
  otherwise => module.__builtins__ = BUILTINS


ModuleLoader = subclass importlib.machinery.SourceFileLoader where
  source_to_code = data filename ~>
    compile (data.decode 'utf-8') filename

  exec_module = module ~>
    add_module_builtins module
    importlib.machinery.SourceFileLoader.exec_module self module


sys.meta_path.insert 0 $ subclass importlib.abc.MetaPathFinder where
  find_spec = classmethod $ fullname path: None target: None ~> next
    where for entry in (if (path is None => sys.path) (otherwise => path)) =>
      entry :: (str, bytes) =>
        spec = importlib.machinery.FileFinder entry (ModuleLoader, ['.dg']) |>.find_spec fullname target
        spec and spec.loader => yield spec
    None

# When doing `python -m ...`, instead of actually importing `__main__.dg`, `runpy`
# attempts to execute it directly in a pre-existing module named `__main__`. Since
# it wasn't imported through `ModuleLoader`, it lacks the new builtins, which is bad.
add_module_builtins (sys.modules !! '__main__')
