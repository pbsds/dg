import '/re'
import '/sys'
import '/collections'


#: Parse an input string.
#:
#: parse :: str (Optional str) -> Node
#:
parse = data filename: '<string>' -> Parser data filename |>.file


#: Parse the contents of a file-like object opened in text mode.
#:
#: parsefd :: TextIOBase (Optional str) -> Node
#:
parsefd = data filename: '<stream>' -> parse (data.read -1) filename


#: Given a comma-separated list of items, convert it into a call to `name`.
#:
#: tuple_into :: str Node -> Node
#:
tuple_into = name x -> Expression x.loc (Name x.loc True name) *:
  if x :: Constant   and x.value is None              => ()
     x :: LeftBind   and x.op == ','                  => x.args
     x :: Expression and x.op == ',' and not x.closed => x.args
     otherwise => (x,)


Parser = subclass collections.deque where
  #: A precompiled regular expression that should match a single token.
  #: Every top-level group must be named; its name is passed to `token`
  #: in order to determine which token is being processed.
  regex = re.compile r'''(?isx)
    (?P<skip> [^\S\n]+ | \s*\# (?: :(?P<docstr>[^\n]*) | [^\n]* ))
   |(?P<number>
      [+-]?(?:
        (?P<isbin>0b)[01]+
       |(?P<isoct>0o)[0-7]+
       |(?P<ishex>0x)[0-9a-f]+
       |[0-9]+ (?P<isfloat> (?:\.[0-9]+)? (?:e[+-]?[0-9]+)?) (?P<isimag> j)?
      )
    )
   |(?P<string>
      (?P<flags>br|r?b?)
      (?P<quote>'{3}|"{3}|'|")
      (?P<content>(?:[^\\]|\\.)*?)
      \11)  # should point to <quote>
   # If a string that has a beginning but no end:
   |(?P<strerr> (?:br|r?b?)['"])
   # This "asterisks followed by a colon" thing is a hack to make `f *: xs`
   # and `f **: xs` parse as `f ((*) : xs)` instead of `f * (: xs)`.
   |(?P<name>   \w+'*|\*+(?=:))
   |(?P<infix>  [!$%&*+\--/:<-@\\^|~;]+|,)
   |(?P<eol>    \s*\n(?P<indent>[\ \t]*))
   |(?P<block>  [\(\{\[])
   |(?P<end>    [\)\}\]] | $)
   |(?P<iname>  `(?P<iname_>\w+'*)`)
   |(?P<error>  .)
  '''

  #: A recursive descent parser with a built-in regex-based tokenizer.
  #:
  #:   tokens :: iter MatchObject -- see `regex`.
  #:   indent :: deque int -- a stack of indentation levels, starting with 0.
  #:   lineno :: int -- 1-based line number.
  #:   charno :: int -- 1-based character number.
  #:   lines  :: list str -- the input, split at line breaks.
  #:
  __init__ = @data @filename ~>
    @tokens = @regex.finditer @data
    @indent = collections.deque [0]
    @lineno = 1
    @charno = 1
    @lines  = @data.split '\n'
    @docstr = ''
    None

  __repr__ = self -> object.__repr__ self
  __iter__ = self -> self
  __next__ = self -> if
    self      => @pop!
    otherwise =>
      match = next @tokens
      text  = match.group 0
      pos   = @location

      '\n' in text =>
        @lineno += text.count '\n'
        @charno = -text.rfind '\n'
      @charno += len text
      @token pos match.lastgroup match

  #: The offset of the next token in the source code as a `SyntaxError`-compatible tuple.
  #:
  #: location :: (str, int, int, str)
  #:
  location = ~> (@filename, @lineno, @charno, @lines !! (@lineno - 1))

  #: A mapping of open parens to close parens.
  #:
  #: endof :: dict str str
  #:
  endof = {('(', ')'), ('{', '}'), ('[', ']')}

  #: Handle a single regex match.
  #:
  #: token :: (str, int, int, str) str MatchObject -> Node
  #:
  token = pos kind m ~> if
    kind == 'skip' =>
      doc = m.group 'docstr'  # This will be attached to the next `\n` name.
      doc => @docstr += '\n' + doc
      next self

    kind == 'block'  => @block   pos m.group! $ x -> x :: Ending and x.value == @endof !! m.group!
    kind == 'end'    => Ending   pos m.group!
    kind == 'name'   => Name     pos False $ m.group 'name'
    kind == 'infix'  => Name     pos True  $ m.group 'infix'
    kind == 'iname'  => Name     pos True  $ m.group 'iname_'
    kind == 'string' => Constant pos $ eval $
      q = 3 * m.group 'quote' !! 0
      # String escapes are complex and the `unicodeescape` codec is broken.
      # These are constants, though, so `eval`ing them is no more dangerous
      # than `eval`ing the rest of the code, which we'll probably do later.
      m.group 'flags' + q + m.group 'content' + q

    kind == 'number' => Constant pos $ if
      m.group 'isimag'  => complex (m.group 'number')
      m.group 'isfloat' => float   (m.group 'number')
      m.group 'isbin'   => int     (m.group 'number') 2
      m.group 'isoct'   => int     (m.group 'number') 8
      m.group 'ishex'   => int     (m.group 'number') 16
      otherwise         => int     (m.group 'number') 10

    kind == 'eol' =>
      '\t' in m.group 'indent' =>
        raise $ SyntaxError 'tabs are not allowed in indentation' @location
      level = len $ m.group 'indent'
      name = Name pos True '\n'
      name.doc, @docstr = @docstr or None, ''

      if level == last @indent => name
         level >  last @indent =>
           @indent.append level
           # `@block` will ignore the line break, but copy its
           # docstring to the next node.
           @append name
           @block pos None $ x ->
             x :: Ending => x.value == '\n' or
               # Indented blocks can be ended with close-parens.
               # We have to account for a decrease in indentation, though.
               @indent.pop!
               # A parenthesized block will take `x` (a close-paren) off the stack.
               @append x
             x :: Ending
         otherwise =>
           @append name
           while level != @indent.pop! =>
             @indent or raise SyntaxError 'no matching indentation level' @location
             @append $ Ending @location '\n'
           @indent.append level
           @pop!

    kind == 'strerr' => raise SyntaxError 'unexpected EOF in a string literal' pos
    kind == 'error'  => raise SyntaxError 'invalid character'                  pos
    otherwise        => raise KeyError $ 'unhandled group {!r}'.format f

  #: Parse the whole input, yielding a complete AST.
  #:
  #: file :: Node
  #:
  file = ~> @block @location None $ x ->
    x :: Ending => if
      x.value == ''   => True
      x.value == '\n' => raise SyntaxError 'indentation < 0?'       x.loc
      otherwise       => raise SyntaxError 'unexpected close-paren' x.loc

  #: Read tokens until `end` returns True.
  #:
  #: block :: (str, int, int, str) (Maybe str) (Node -> bool) -> Node
  #:
  block = pos kind end ~>
    isexpr = False
    result = if
      kind == '(' => Expression pos $ Name pos True ","
      otherwise   => Constant pos None
    # Docstrings are attached to line breaks, not meaningful nodes.
    # `infix` will carry the docstring from a `\n` to its RHS, but if the `\n`
    # is in a null denotation, this method should handle it.
    first_docstr = None

    while not $ end (x = next self) => if
      x :: Ending => if
        x.value == ''   => raise SyntaxError 'unexpected EOF (a block was not closed)'      pos
        x.value == '\n' => raise SyntaxError 'indentation less than minimum for this block' x.loc
        otherwise       => raise SyntaxError 'invalid close-paren'                          x.loc
      # BTW, a "null denotation" is when a node is at the start of a token group,
      # like in the last branch. A "left denotation" is when a node is to the right
      # of some other node, i.e. `isexpr` is `True`. That's Pratt parser teminology.
      isexpr    => result = @infix (Name x.loc True '') result x
      x != '\n' =>
        result, isexpr = @special x, True
        result.doc = first_docstr or result.doc
      otherwise => first_docstr = x.doc or first_docstr

    result = if
      kind == '{' => tuple_into "dict'" result
      kind == '[' => tuple_into "list'" result
      otherwise   => result
    result.closed |= not $ kind is None
    result.indent  =       kind is None
    result

  #: Combine two parts of a tree with an infix `Name`.
  #:
  #: infix :: Name Node Node -> Node
  #:
  infix = op lhs rhs ~> if
    rhs :: Ending or op.norhs =>
      @append rhs
      if op in ('', '\n') => lhs  # these are no-op on one argument. Optimization!
         otherwise        => @infixin op lhs None
    # FIXME `special` tries to read until the next line break, but if there's an indented
    #       block following an infix operator, this method will consume both.
    #       That's why   if x =>     is parsed as   if (x =>       and not   if (x =>)
    #                       y => z                     (y => z))                (y => z)
    rhs.infix and not rhs.closed => if
      # `lhs op (rhs next)`:
      rhs.nolhs or (op != '' and op < rhs) =>
        @infixin op lhs $ @infix (Name rhs.loc True '') rhs $ next self
      # `(lhs op) rhs next`:
      op in ('', '\n') => @infix rhs lhs $ next self  # still no-op.
      otherwise        => @infix rhs (@infixin op lhs None) $ next self
    otherwise =>
      # Carry a docstring attached to `\n` through to its RHS.
      op == '\n' => rhs.doc = op.doc
      @infixin op lhs rhs

  #: Recursively descend into `lhs` to apply infix precedence rules.
  #:
  #: infixin :: Name Node (Maybe Node) -> Expression
  #:
  infixin = op lhs rhs ~>
    res = if
      # Right binding strength is lower => descend.
      lhs :: Expression and not lhs.closed and lhs.op < op =>
        lhs.args !! -1 = @infixin op (lhs.args !! -1) rhs
        lhs
      # Variadic operator joined with itself => combine argument lists
      # to create a single expression instead of a double-nesting.
      lhs :: Expression and not lhs.closed and op.varary and op == lhs.op =>
        lhs.args += @unwrap_rhs op rhs
        lhs
      # No right-hand side => create a left infix bind. `x R` <=> `y -> x R y`,
      # only `x` is evaluated eagerly. Normally. The compiler can override that.
      rhs is None => LeftBind lhs.loc op lhs
      # Trying to call an infix operator with an argument => that's
      # actually a right bind, not a function call. `R x` <=> `y -> y R x`. (Normally.)
      op == '' and lhs.infix and not lhs.closed =>
        RightBind lhs.loc lhs *: (@unwrap_rhs lhs rhs)
      otherwise => Expression lhs.loc op lhs *: (@unwrap_rhs op rhs)
    arg = res.args !! -1
    arg :: Expression and not arg.closed and arg.op.weak =>
      # This operator must also be weak. Otherwise, next node might not have
      # higher priority than this operator and won't reach the real "weak" one.
      res.op.weak  = True
      res.op.right = arg.op.right
    res

  #: Given an operator and its RHS, return the list of operands (excluding LHS).
  #:
  #: unwrap_rhs :: Name Node -> [Node]
  #:
  unwrap_rhs = op rhs ~> if
    rhs is None => ()
    # If a function call is followed by an indented block,
    # each statement in that block is a separate argument to that call.
    op == '' and not rhs.closed and rhs :: Expression and rhs.op == '\n' => rhs.args
    op <= ''  => @special rhs,
    otherwise => rhs,

  #: Handle a couple of fancy syntactic constructs.
  #:
  #: special :: Node -> Node
  #:
  special = x ~> if
    # These nodes consume everything until the next fat arrow.
    # "f X => Y" becomes equivalent to "(X) `f` Y".
    x.flags & 1 => @infix x (@block x.loc '(' ('=>' ==)) (next self)
    # These nodes consume everything until the EOL.
    # "f ...\n" => "f (...)\n".
    x.flags & 2 =>
      arg = @block x.loc None $ y ->
        y :: Ending or y == '\n' or y.indent =>
          @append y
          True

      if arg :: Constant and arg.value is None => x
         otherwise => @infixin (Name arg.loc True '') x arg
    otherwise => x
