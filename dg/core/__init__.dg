import '/os'
import '/types'
import '/marshal'
import '/builtins'


#: Recompile this directory.
#:
#: old     -- the current version of the bundle.
#: tag     -- `sys.implementation.cache_tag` of the target.
#: version -- `sys.hexversion` of the target.
#:
#: build :: [CodeType] str int -> [CodeType]
#:
build = old tag version bundle_tag: None ->
  ns = dict __name__: 'dg' PY_TAG: tag PY_VERSION: version __builtins__: builtins.__dict__
  for c in old => eval c ns
  bundle_tag is None or
    yield $ (ns !! 'compile') ('BUNDLE_TAG = {!r}'.format bundle_tag)
  for d in __path__ =>
    for f in sorted (os.listdir d) => if not $ f.startswith '_' =>
      with fd = open (os.path.join d f) 'r' =>
        yield $ (ns !! 'compilefd') fd ('<core:' + f + '>')


#: Load an existing bundle.
#:
#: tag     -- `sys.implementation.cache_tag` of the target interpreter.
#: dirname -- path to the directory with bundles.
#:
#: load :: str str -> [CodeType]
#:
load = tag dirname ->
  except
    err => with fd = open (os.path.join dirname (tag + '.dgbundle')) 'rb' => marshal.load fd
    err :: FileNotFoundError => with fd = open (os.path.join dirname (tag + '.dgbundle.py')) => eval fd.read! {('C', types.CodeType)}


#: Write the compiled code bundle as returned by `rebuild`.
#:
#: tag     -- `sys.implementation.cache_tag` of the target interpreter.
#: dirname -- path to the directory with bundles.
#:
#: save :: [CodeType] str str -> a
#:
save = code tag dirname ->
  data = marshal.dumps code
  os.makedirs dirname exist_ok: True
  # Note that `marshal.dump` may raise an exception mid-file,
  # leaving the bundle in a corrupted state. That generally means there
  # is an error in the compiler, so opening the file before finishing the
  # encoding process is undesirable.
  with fd = open (os.path.join dirname (tag + '.dgbundle')) 'wb' => fd.write data


_repr = x -> if
  x :: types.CodeType =>
    fields  = ['argcount', 'kwonlyargcount', 'nlocals', 'stacksize', 'flags', 'code', 'consts', 'names']
    fields += ['varnames', 'filename', 'name', 'firstlineno', 'lnotab', 'freevars', 'cellvars']
    'C({})'.format $ ','.join $ map (f -> _repr $ getattr x $ 'co_' + f) fields
  x :: list  => '[{}]'.format $ ''.join $ map (i -> _repr i + ',') x
  x :: tuple => '({})'.format $ ''.join $ map (i -> _repr i + ',') x
  otherwise => repr x


#: Write the compiled bundle without using `marshal`.
#:
#: save_compat :: [CodeType] str str -> a
#:
save_compat = code tag dirname ->
  data = _repr code
  os.makedirs dirname exist_ok: True
  with fd = open (os.path.join dirname (tag + '.dgbundle.py')) 'w' => fd.write data
