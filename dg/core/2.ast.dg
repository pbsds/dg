#: Non-infix names that should be parsed as infix, and infix names
#: that should be parsed as non-infix.
INVERT = 'and', 'in', 'is', 'or', 'where', '...'
#: The set of operators that accept any no. of arguments, mostly for optimization.
#: (Normally, an operator is binary.)
VARARY = ',', '\n', ''
#: The set of operators that should not accept a left-hand (right-hand) expression,
#: so `a R b` becomes `a (R b)` (`(a R) b`).
NOLHS = '@', '@@', '~',
NORHS = '!',
#: Operators with these flags behave differently in a null-denotation context.
#: See the parser (`Parser.special`) for details.
FLAGS = dict' ('for', 1) ('while', 1) ('with', 1) ('if', 2) ('except', 2)
#: Infix operator binding strength. `a R b Q c` <=> `a R (b Q c)` iff
#: the left binding strength of `Q` is greater than the right binding strength
#: of `R`; otherwise, it's `(a R b) Q c`.
STRENGTH' = (130, 130)  # Default value.
STRENGTH  = dict'       # Per-operator overrides.
  '@@',    (220, 220)   # These are all multiplies of 10 to make some space
  '@',     (220, 220)   # for possible future additions.
  '.',     (210, 210)
  '!.',    (210, 210)
  '!',     (210, 200)
  ':',     (210, 190)
  '',      (190, 190)
  '->',    (180,  20)
  '~>',    (180,  20)
  '->>',   (180,  20)
  '~>>',   (180,  20)
  '!!',    (170, 170)
  '**',    (170, 160)
  '*',     (150, 150)
  '/',     (150, 150)
  '//',    (150, 150)
  '%',     (150, 150)
  '+',     (140, 140)
  '-',     (140, 140)
  '<',     (120, 120)
  '<=',    (120, 120)
  '>',     (120, 120)
  '>=',    (120, 120)
  '==',    (120, 120)
  '!=',    (120, 120)
  'is',    (120, 120)
  'in',    (120, 120)
  '<<',    (110, 110)
  '>>',    (110, 110)
  '&',     (100, 100)
  '^',     ( 90,  90)
  '|',     ( 80,  80)
  'and',   ( 70,  70)
  'or',    ( 60,  60)
  '$',     ( 60,  50)
  '<|',    ( 60,  50)
  '|>',    ( 50,  50)
  '|>.',   ( 50, 210)
  ',',     ( 40,  40)
  '=',     ( 40,  30)
  ':=',    ( 40,  30)
  '!!=',   ( 40,  30)
  '+=',    ( 40,  30)
  '-=',    ( 40,  30)
  '*=',    ( 40,  30)
  '**=',   ( 40,  30)
  '/=',    ( 40,  30)
  '//=',   ( 40,  30)
  '%=',    ( 40,  30)
  '&=',    ( 40,  30)
  '^=',    ( 40,  30)
  '|=',    ( 40,  30)
  '<<=',   ( 40,  30)
  '>>=',   ( 40,  30)
  'where', ( 40,  30)
  'for',   ( 40,  30)
  'while', ( 40,  30)
  'with',  ( 40,  30)
  '=>',    ( 40,  30)
  '\n',    ( 10,  10)


SyntaxError = subclass SyntaxError where
  # Standard SyntaxError contains a hack that completely breaks error messages
  # when the line contains the word "print" not followed by an open-paren.
  #
  #   $ SyntaxError "something" ('file', 1, 1, 'print stuff') |>.msg
  #   = "Missing parentheses in call to 'print'"
  #
  __str__ = (msg = ~> head @args).fget


Node = subclass object where
  closed = False  # :: bool -- whether the node is parenthesized
  indent = False  # :: bool -- whether the node is indented relative to the surroundings
  infix  = False  # :: bool -- this and below only make sense for `Name`s.
  nolhs  = False  # :: bool -- see `NOLHS`
  norhs  = False  # :: bool -- see `NORHS`
  varary = False  # :: bool -- see `VARARY`
  async  = False  # :: bool -- whether this is an operator of expression wrapped in `async`
  weak   = False  # :: bool -- whether this infix name should have a low right strength.
  doc    = None   # :: Maybe str -- the `#:` comment that precedes the expression.
  flags  = 0      # :: int  -- see `FLAGS`

  #: Construct a SyntaxError at the location of this node.
  #:
  #: invalid :: str -> Exception
  #:
  invalid = description ~> SyntaxError description @loc


Name = subclass Node where
  __init__ = self @loc infix value ->
    @value  = value
    @infix  = value in INVERT ^ infix
    @nolhs  = value in NOLHS
    @norhs  = value in NORHS
    @varary = value in VARARY
    @weak = @flags = FLAGS.get @value 0
    @left,  @right = STRENGTH.get @value STRENGTH'
    None

  __lt__   = self x -> @right <  STRENGTH.get x STRENGTH' !! 0
  __le__   = self x -> @right <= STRENGTH.get x STRENGTH' !! 0
  __eq__   = self x -> @value == x
  __hash__ = self   -> hash @value
  __repr__ = self   -> if
    @closed   => '(' + @value + ')'
    otherwise =>       @value


Expression = subclass Node where
  __init__ = self @loc @op *: args ->
    @args = list args
    @args => @doc = (args !! 0).doc
    None
  # FIXME this repr looks awful.
  __repr__ = self -> '(' + (repr @op or ' ').join (map repr @args) + ')'


Constant = subclass Node where
  __init__ = self @loc @value -> None
  __repr__ = self -> repr @value


LeftBind = subclass Expression where
  closed = True  # Left binds have no RHS and therefore cannot be extended.
  __repr__ = self -> '({[0]!r} {!r})'.format @args @op


RightBind = subclass Expression where
  __repr__ = self -> '({!r} {[0]!r})'.format @op @args


Ending = subclass Node where
  __init__ = self @loc @value -> None
  __repr__ = self -> '<Ending: {!r}>'.format @value
